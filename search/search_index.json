{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentaci\u00f3n: Next.js + Payload CMS","text":"<p>Bienvenido a la documentaci\u00f3n oficial del proyecto. Aqu\u00ed encontrar\u00e1s gu\u00edas para:</p> <ul> <li>Entender la estructura base</li> <li>Implementar autenticaci\u00f3n segura</li> <li>Crear y publicar contenido desde el frontend</li> </ul> <p>Comienza por conocer la estructura del proyecto.</p> <p></p>"},{"location":"autenticacion/","title":"Autenticaci\u00f3n","text":"<p>Tip</p>"},{"location":"autenticacion/#organiza-tus-carpetas-de-forma-coherente-para-facilitar-la-escalabilidad-del-proyecto","title":"Organiza tus carpetas de forma coherente para facilitar la escalabilidad del proyecto.","text":""},{"location":"autenticacion/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>El sistema de autenticaci\u00f3n usa <code>next-auth</code> con Payload CMS como proveedor personalizado.</p> <p>Warning</p> <p>No uses localStorage para guardar JWT. Siempre usa cookies seguras con <code>HttpOnly</code>.</p>"},{"location":"autenticacion/#flujo","title":"Flujo","text":"<ol> <li>El frontend env\u00eda el correo y contrase\u00f1a a un endpoint.</li> <li>El backend responde con un JWT si es v\u00e1lido.</li> <li>El JWT se guarda como cookie en el navegador.</li> </ol>"},{"location":"autenticacion/#codigo-de-ejemplo","title":"C\u00f3digo de ejemplo","text":"API Login en Next.jsFormulario de inicio de sesi\u00f3n <pre><code>import { NextResponse } from 'next/server';\nimport payload from 'payload';\n\nexport async function POST(req: Request) {\nconst { email, password } = await req.json();\nconst user = await payload.login({ email, password });\nreturn NextResponse.json(user);\n}\n</code></pre> <pre><code>&lt;form action=\"/api/login\" method=\"POST\"&gt;\n  &lt;input type=\"email\" name=\"email\" required /&gt;\n  &lt;input type=\"password\" name=\"password\" required /&gt;\n  &lt;button&gt;Entrar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"estructura/","title":"Estructura del Proyecto","text":"<p>Este proyecto combina Next.js (App Router) con Payload CMS.</p> Carpeta Descripci\u00f3n <code>/app</code> Rutas del frontend con Next.js <code>/payload</code> Backend headless CMS (colecciones, hooks, etc.) <code>/actions</code> Server Actions para comunicaci\u00f3n directa"},{"location":"estructura/#codigo-de-ejemplo","title":"C\u00f3digo de ejemplo","text":"Next.js AppPayload CMS Collection <pre><code>export default function Page() {\n  return &lt;h1&gt;Foros&lt;/h1&gt;;\n}\n</code></pre> <pre><code>import { CollectionConfig } from 'payload/types';\n\nexport const Forums: CollectionConfig = {\nslug: 'forums',\nfields: [{ name: 'title', type: 'text' }],\n};\n</code></pre>"},{"location":"publicacion/","title":"Publicaci\u00f3n de Contenido","text":""},{"location":"publicacion/#publicacion-de-contenido","title":"Publicaci\u00f3n de Contenido","text":"<p>Con Payload CMS puedes crear colecciones como foros, temas y comentarios, y gestionarlos desde el frontend.</p> <p>Note</p> <p>Puedes usar <code>useForm</code> o <code>server actions</code> para manejar la creaci\u00f3n de contenido.</p>"},{"location":"publicacion/#crear-un-tema-desde-el-frontend","title":"Crear un tema desde el frontend","text":"Server ActionFormulario en React <pre><code>'use server';\n\nexport async function addTheme(data) {\nconst res = await fetch('http://localhost:3000/api/themes', {\n    method: 'POST',\n    body: JSON.stringify(data),\n});\nreturn res.json();\n}\n</code></pre> <pre><code>&lt;form action={addTheme}&gt;\n    &lt;input name=\"title\" required /&gt;\n    &lt;button type=\"submit\"&gt;Crear&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Rol Permisos Admin Todo (crear, editar, borrar) Editor Crear y editar Viewer Solo lectura"}]}